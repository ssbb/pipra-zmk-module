/*
 * Copyright (c) 2025 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

/dts-v1/;

#include <nordic/nrf52840_qiaa.dtsi>

#include <zephyr/dt-bindings/dt-util.h>
#include <zephyr/dt-bindings/adc/adc.h>
#include <zephyr/dt-bindings/gpio/nordic-nrf-gpio.h>

#include <dt-bindings/zmk/matrix_transform.h>
#include <physical_layouts.dtsi>

#include <freq.h>

/ {
    model = "Pipra";
    compatible = "ssbb,pipra";

    chosen {
        zephyr,code-partition = &code_partition;
        zephyr,sram = &sram0;
        zephyr,flash = &flash0;
        zephyr,console = &cdc_acm_uart;
        zephyr,shell-uart = &cdc_acm_uart;

        zmk,battery = &fuelgauge;
        zmk,physical-layout = &physical_layout0;
    };

    aliases {
        led-red = &led_red;
        led-blue = &led_yellow;
        led-green = &led_green;
    };

    default_transform: keymap_transform_0 {
        compatible = "zmk,matrix-transform";
        columns = <12>;
        rows = <4>;
        map = <
            RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,10) RC(0,9) RC(0,8) RC(0,7) RC(0,6)
            RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,10) RC(1,9) RC(1,8) RC(1,7) RC(1,6)
                    RC(2,1) RC(2,2) RC(2,3)                 RC(2,9) RC(2,8) RC(2,7)
                                    RC(2,5) RC(1,5) RC(1,11) RC(2,11)
        >;
    };

    kscan0: kscan_0 {
        compatible = "zmk,kscan-ec-matrix";
        matrix-relax-us = <3>;
        matrix-warm-up-us = <500>;
        adc-read-settle-us = <1>;
        sleep-after-secs = <10>;
        active-polling-interval-ms = <2>;
        idle-polling-interval-ms = <3>;
        sleep-polling-interval-ms = <4>;
        dynamic-polling-interval;
    };

    physical_layout0: physical_layout0 {
        compatible = "zmk,physical-layout";
        display-name = "Default Layout";
        kscan = <&kscan0>;
        transform = <&default_transform>;
    };

    amux: amux {
        compatible = "zmk,gpio-mux";
        gpio-controller;
        #gpio-cells = <2>;
    };

    left_encoder: encoder_left {
        compatible = "alps,ec11";
        a-gpios = <&gpio0 20 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        b-gpios = <&gpio0 22 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        steps = <48>;
        status = "disabled";
    };

    right_encoder: encoder_right {
        compatible = "alps,ec11";
        a-gpios = <&gpio0 3 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        b-gpios = <&gpio0 28 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        steps = <48>;
        status = "disabled";
    };

    sensors: sensors {
        compatible = "zmk,keymap-sensors";
        sensors = <&left_encoder &right_encoder>;
        triggers-per-rotation = <12>;
    };

    leds {
        compatible = "gpio-leds";
        status = "okay";

        led_red: led_red { };
        led_yellow: led_yellow { };
        led_green: led_green { };
    };
};

&adc {
    status = "okay";

    #address-cells = <1>;
    #size-cells = <0>;

    channel@1 {
        reg = <1>;
        zephyr,gain = "ADC_GAIN_1_4";
        zephyr,reference = "ADC_REF_INTERNAL";
        zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 3)>;
        zephyr,resolution = <12>;
    };
};

&gpiote {
	status = "okay";
};

&gpio0 {
	status = "okay";
};

&gpio1 {
	status = "okay";
};

zephyr_udc0: &usbd {
	status = "okay";
    cdc_acm_uart: cdc_acm_uart {
        compatible = "zephyr,cdc-acm-uart";
    };
};


&i2c0 {
    status = "okay";
    compatible = "nordic,nrf-twim";
	pinctrl-0 = <&i2c0_default>;
    pinctrl-1 = <&i2c0_sleep>;
    pinctrl-names = "default", "sleep";
	clock-frequency = <100000>;

	fuelgauge: max17048@36 {
		compatible = "zmk,maxim-max17048";
		reg = <0x36>;
	};
};

&flash0 {
    // For more information, see:
    // http://docs.zephyrproject.org/latest/devices/dts/flash_partitions.html
    partitions {
        compatible = "fixed-partitions";
        #address-cells = <1>;
        #size-cells = <1>;

        sd_partition: partition@0 {
            label = "softdevice";
            reg = <0x00000000 0x00026000>;
        };

        code_partition: partition@26000 {
            label = "code_partition";
            reg = <0x00026000 0x00046000>;
        };

        // The flash starting at 0x0006c000 and ending at
        // 0x00073fff is reserved for use by the application.

        // Storage partition will be used by FCB/LittleFS/NVS if enabled.
        storage_partition: partition@6c000 {
            label = "storage";
            reg = <0x0006c000 0x00008000>;
        };

        boot_partition: partition@74000 {
            label = "adafruit_boot";
            reg = <0x00074000 0x0000c000>;
        };
    };
};
